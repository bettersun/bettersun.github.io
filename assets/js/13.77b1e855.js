(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{553:function(e,t,n){"use strict";n.r(t);var a=n(20),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"goframe"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#goframe"}},[e._v("#")]),e._v(" GoFrame")]),e._v(" "),n("h2",{attrs:{id:"简单api开发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单api开发"}},[e._v("#")]),e._v(" 简单API开发")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("初始化项目")]),e._v(" "),n("p",[e._v("本例使用xgo。"),n("br"),e._v("\n新建xgo目录，然后进入目录后，执行命令 gf init xgo")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("gf init xgo\n")])])])]),e._v(" "),n("li",[n("p",[e._v("新建api")]),e._v(" "),n("p",[e._v("本例机能使用 welcome。"),n("br"),e._v("\n在./app/api目录下，新建机能目录。"),n("br"),e._v("\n在新建的机能目录下新建api的代码文件。")]),e._v(" "),n("p",[e._v("代码文件路径："),n("br"),e._v("\n./app/api/welcome/welcome.go")]),e._v(" "),n("p",[e._v("代码内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package welcome\n\nimport (\n    "github.com/gogf/gf/net/ghttp"\n)\n\n// \nfunc Welcome(r *ghttp.Request) {\n    r.Response.Writeln("Welcome to goframe!")\n}\n')])])]),n("p",[e._v("包名使用welcome。"),n("br"),e._v("\n引入goframe封装的ghttp。"),n("br"),e._v("\n编写API的处理函数，函数的参数是goframe封装的gttp.Request的指针。")])]),e._v(" "),n("li",[n("p",[e._v("编写中间件")]),e._v(" "),n("p",[e._v("本例编写一个跨域中间件"),n("br"),e._v("\n在根目录下新建目录middleware。"),n("br"),e._v("\n在middleware目录新建cors.go")]),e._v(" "),n("p",[e._v("代码内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package middleware\n\nimport "github.com/gogf/gf/net/ghttp"\n\n// 允许接口跨域请求\nfunc CORS(r *ghttp.Request) {\n    r.Response.CORSDefault()\n    r.Middleware.Next()\n}\n')])])])]),e._v(" "),n("li",[n("p",[e._v("注册路由")]),e._v(" "),n("p",[e._v("默认的路由文件在./router/router.go中。")]),e._v(" "),n("p",[e._v("官方示例中的说明：")]),e._v(" "),n("blockquote",[n("p",[e._v("// 你可以将路由注册放到一个文件中管理，"),n("br"),e._v("\n// 也可以按照模块拆分到不同的文件中管理，"),n("br"),e._v("\n// 但统一都放到router目录下。")])]),e._v(" "),n("p",[e._v("本例先放在单一文件中。")]),e._v(" "),n("p",[e._v("代码内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package router\n\nimport (\n    "github.com/gogf/gf/frame/g"\n    "github.com/gogf/gf/net/ghttp"\n\n    "xgo/app/api/hello"\n    "xgo/app/api/welcome"\n\n    "xgo/middleware"\n)\n\nfunc init() {\n    s := g.Server()\n    s.Group("/", func(group *ghttp.RouterGroup) {\n\n        group.Middleware(middleware.CORS)\n\n        group.ALL("/", hello.Hello)\n        group.ALL("/welcome", welcome.Welcome)\n    })\n}\n\n')])])])]),e._v(" "),n("li",[n("p",[e._v("运行服务")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("go run main.go\n")])])]),n("p",[e._v("运行服务后可在控制台看到所有服务的路由。")])]),e._v(" "),n("li",[n("p",[e._v("访问URL")]),e._v(" "),n("p",[e._v("访问 http://localhost:8199/welcome")]),e._v(" "),n("p",[e._v("输出结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Welcome to goframe!\n")])])])]),e._v(" "),n("li",[n("p",[e._v("API返回JSON")]),e._v(" "),n("p",[e._v("使用ghttp.Request.Response.WriteJson()方法返回JSON。"),n("br"),e._v("\n修改 ./app/api/welcome/welcome.go")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package welcome\n\nimport (\n    "github.com/gogf/gf/net/ghttp"\n)\n\ntype WelcomeInfo struct {\n    Message string `json:"message"`\n}\n\nfunc Welcome(r *ghttp.Request) {\n    var welcomeInfo WelcomeInfo\n    welcomeInfo.Message = "Welcome to goframe!"\n\n    r.Response.WriteJson(welcomeInfo)\n}\n')])])]),n("p",[e._v("首先定义 WelcomeInfo 结构体，添加一个可导出属性Message，并指定json解析用键值。"),n("br"),e._v("\nWelcome方法中，给WelcomeInfo实例的Message属性设定一个值。"),n("br"),e._v("\n然后使用 ghttp.Request.Response.WriteJson() 返回JSON。")]),e._v(" "),n("p",[e._v("访问URL后返回的原始数据为：")]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"message"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Welcome to goframe!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])]),e._v(" "),n("h2",{attrs:{id:"使用controller"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用controller"}},[e._v("#")]),e._v(" 使用Controller")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("添加Controller")]),e._v(" "),n("p",[e._v("在./app/api/welcome/welcome.go里定义一个空的结构体Controller作为API管理对象。"),n("br"),e._v("\n路由注册时只需要把Controller注册给 /welcome，然后所有Controller指针的导出函数都会自动映射到对应的URL。"),n("br"),e._v("\n非导出函数不会被映射。")]),e._v(" "),n("p",[e._v("映射规则：")]),e._v(" "),n("ul",[n("li",[e._v("函数名的首字母大写，映射到对应的URL的首字母小写。")]),e._v(" "),n("li",[e._v("函数名中间的大写字母会映射为 短线+小写字母。")])]),e._v(" "),n("p",[e._v("例："),n("br"),e._v("\nWelcomeMessage()函数映射的URL为 /welcome/welcome-message。")]),e._v(" "),n("p",[e._v("例如："),n("br"),e._v("\nwelcome.go里为Controller定义了一个方法：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package welcome\n\nimport (\n    "github.com/gogf/gf/net/ghttp"\n)\n\ntype Controller struct{}\n\nfunc (c *Controller) Come(r *ghttp.Request) {\n\n    r.Response.Writeln("Come to goframe!")\n}\n\n')])])])]),e._v(" "),n("li",[n("p",[e._v("改变路由注册方式")]),e._v(" "),n("p",[e._v("新建一个welcome的Controller实例。"),n("br"),e._v("\n然后把这个Controller实例注册到 /welcome 。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package router\n\nimport (\n    "github.com/gogf/gf/frame/g"\n    "github.com/gogf/gf/net/ghttp"\n\n    "xgo/app/api/hello"\n    "xgo/app/api/welcome"\n\n    "xgo/middleware"\n)\n\nfunc init() {\n    s := g.Server()\n    s.Group("/", func(group *ghttp.RouterGroup) {\n\n        ctlWelcome := new(welcome.Controller)\n\n        group.Middleware(middleware.CORS)\n\n        group.ALL("/", hello.Hello)\n        group.ALL("/welcome", ctlWelcome)\n    })\n}\n')])])])]),e._v(" "),n("li",[n("p",[e._v("运行服务")]),e._v(" "),n("p",[e._v("运行服务后可在控制台看到所有服务的路由。"),n("br"),e._v("\n可以看到，./app/api/welcome/welcome.go里Controller的Come函数自动注册到/welcome/come的URL。")])]),e._v(" "),n("li",[n("p",[e._v("访问URL")]),e._v(" "),n("p",[e._v("访问 http://localhost:8199/welcome/come")]),e._v(" "),n("p",[e._v("输出结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Come to goframe!\n")])])])])]),e._v(" "),n("h2",{attrs:{id:"使用controller并调用service"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用controller并调用service"}},[e._v("#")]),e._v(" 使用Controller并调用Service")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("新建Service用代码文件")]),e._v(" "),n("p",[e._v("在./app/api/service目录下新建welcome目录，在welcome目录下新建welcome.go文件。")]),e._v(" "),n("p",[e._v("代码路径："),n("br"),e._v("\n./app/api/service/welcome/welcome.go")]),e._v(" "),n("p",[e._v("代码内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package welcome\n\ntype WelcomeInfo struct {\n    Message string `json:"message"`\n}\n\nfunc Message() string {\n    return "Welcome to goframe!"\n}\n\nfunc Info() WelcomeInfo {\n\n    var welcomeInfo WelcomeInfo\n    welcomeInfo.Message = "Welcome to goframe!"\n\n    return welcomeInfo\n}\n')])])])]),e._v(" "),n("li",[n("p",[e._v("在API文件Controller的函数中调用Service")]),e._v(" "),n("p",[e._v("需要引入服务的机能包。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package welcome\n\nimport (\n    "github.com/gogf/gf/net/ghttp"\n\n    "xgo/app/service/welcome"\n)\n\ntype Controller struct{}\n\nfunc (c *Controller) Message(r *ghttp.Request) {\n\n    message := welcome.Message()\n    r.Response.Writeln(message)\n}\n\nfunc (c *Controller) Info(r *ghttp.Request) {\n\n    welcomeInfo := welcome.Info()\n    r.Response.WriteJson(welcomeInfo)\n}\n')])])])]),e._v(" "),n("li",[n("p",[e._v("运行服务后访问URL确认。")]),e._v(" "),n("ul",[n("li",[e._v("访问 http://localhost:8199/welcome/message")])]),e._v(" "),n("p",[e._v("输出结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Welcome to goframe!\n")])])]),n("ul",[n("li",[e._v("访问 http://localhost:8199/welcome/info")])]),e._v(" "),n("p",[e._v("输出结果：")]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"message"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Welcome to goframe!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])])])}),[],!1,null,null,null);t.default=o.exports}}]);